name: csv-reader-toolset
export: read-csv-schema, duckdb, install-duckdb
---
name: read-csv-schema
description: read schema from a csv file. Install duckdb first
args: csvPath: the path to csv file
tools: install-duckdb

#!/bin/bash
echo "CREATE TEMPORARY TABLE temp_csv AS SELECT * FROM read_csv_auto('${csvPath}'); PRAGMA table_info('temp_csv');" | duckdb ":memory:"

---
name: duckdb
description: use duckdb to analyze csv file and make query. Install duckdb first.
tools: install-duckdb
args: input: command line arg input

#!/bin/bash
set -x

duckdb -c "${input}"

---
name: install-duckdb
description: install duckdb based on the operating system.

#!/bin/bash
set -x

detect_os() {
    case "$(uname -s)" in
       Darwin)
         echo 'macOS'
         ;;
       Linux)
         echo 'Linux'
         ;;
       *)
         echo 'Other'
         ;;
    esac
}

install_duckdb_debian() {
    echo "Installing DuckDB on Debian-based Linux"
    sudo apt-get update
    sudo apt-get install -y duckdb
}

install_duckdb_redhat() {
    echo "Installing DuckDB on Red Hat-based Linux"
    sudo yum update
    sudo yum install -y duckdb
}

install_duckdb_mac() {
    echo "Installing DuckDB on macOS"
    brew update
    brew install duckdb
}

install_duckdb_python() {
    echo "Installing DuckDB Python package"
    pip install duckdb
}

if command -v duckdb &> /dev/null
then
    echo "DuckDB CLI is already installed."
else
    OS=$(detect_os)

    case $OS in
        "macOS")
            install_duckdb_mac
            ;;
        "Linux")
            # Further detect if it's Debian-based or Red Hat-based
            if [ -f /etc/debian_version ]; then
                install_duckdb_debian
            elif [ -f /etc/redhat-release ]; then
                install_duckdb_redhat
            else
                echo "Unsupported Linux distribution for this script."
                exit 1
            fi
            ;;
        *)
            echo "Unsupported OS for this script."
            exit 1
            ;;
    esac
fi